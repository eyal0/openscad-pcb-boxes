#!python


import os
import re
import platform
import subprocess

windows = "Windows" in platform.platform()
if windows:
  openscad_binary = 'C:\Program Files\OpenSCAD\openscad.exe'
else:
  openscad_binary = "openscad-nightly"

def openscad(target, source, env):
  group = str(target[0]).split("_")[-1].split(".")[0]
  for t in target:
    command = [openscad_binary,
              '-D', ('$group={0}"' + group + '{0}"').format("" if windows else ""),
              '-D', '$fn=' + str(env['fn']),
              '--viewall', '--autocenter', '--render',
              '-o', str(target[0]),
              str(source[0])]
    print command
    subprocess.call(command)

def openscad2(target, source, path):
  if '.' in str(target):
    targets = [str(target)]
  else:
    targets = [str(target) + suffix for suffix in ['.png', '.stl']]
  if '.' in str(source):
    sources = [str(source)]
  else:
    sources = [str(source[0]) + suffix for suffix in ['.scad']]
  for t in targets:
    for s in sources:
      env.Openscad(target=t, source=s)

def openscad_counter(target, source, counter):
  if '.' in str(target):
    targets = [str(target)]
  else:
    targets = [str(target) + suffix for suffix in ['.png', '.stl']]
  if '.' in str(source):
    sources = [str(source)]
  else:
    sources = [str(source[0]) + suffix for suffix in ['.scad']]
  for t in targets:
    for s in sources:
      for i in xrange(counter):
        group = str(t).split("_")[-1].split(".")[0]
        filename = "/" + os.getcwd() + "/" + target[0]
        print filename
        command = [openscad_binary,
                   '-D', ('$group="' + group + '"'),
                   '-D', '$fn=' + str(env['fn']),
                   '-D', ('$filename="' + filename + '"'),
                   '-D', str(i),
                   '--viewall', '--autocenter', '--render',
                   '-o', str(t),
                   str(s)]
        print command
        subprocess.call(command)


openscad = Builder(
    action = openscad)
env = Environment(
    BUILDERS = {'Openscad': openscad})
env["fn"] = ARGUMENTS.get('fn', 10)

include_re = re.compile(r'^(?:use|include)\s*\<(\S+)\>', re.M)

def scad_scan(node, env, path):
  contents = node.get_contents()
  includes = include_re.findall(contents)
  return includes

scad_scan = Scanner(function = scad_scan, skeys = ['.scad'])
env.Append(SCANNERS = scad_scan)

Export('env openscad2 openscad_counter')
conscripts = [dir + '/SConscript' for dir in ['esr_tester', 'holes_demo', 'function_generator', 'box_screw_post_demo', 'box_button_demo', 'box_screen_demo']]
SConscript(conscripts)
