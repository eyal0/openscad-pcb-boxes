#!python


import os
import re
import platform
import subprocess
import sys

windows = "Windows" in platform.platform()
if windows:
  openscad_binary = 'C:\Program Files\OpenSCAD\openscad.exe'
else:
  openscad_binary = "openscad-nightly"

meshlab_binary = "meshlabserver"
meshlab_filter_script = "../meshlab_scripts/stl_cleanup.mlx"

def openscad(target, source, env):
  for t in target:
    command = [openscad_binary]
    command += env['ARGS']
    command += [
        '-o', str(target[0]),
        str(source[0])]
    if not GetOption('silent'):
      print "'" + "' '".join(command) + "'"
    p = subprocess.Popen(command, stdout=subprocess.PIPE,
                         stderr=subprocess.PIPE)
    stdoutdata, stderrdata = p.communicate()
    if p.returncode != 0 or not GetOption('silent'):
      sys.stderr.write(stderrdata)
      sys.stdout.write(stdoutdata)
    if p.returncode != 0:
      return p.returncode
    if any([err_word.lower() in text.lower()
           for err_word in ['warn', 'err']
           for text in [stdoutdata, stderrdata]]):
      return 127

def openscad2(target, source, path):
  if '.' in str(target):
    targets = [str(target)]
  else:
    targets = [str(target) + suffix for suffix in ['.stl']]
  if '.' in str(source):
    sources = [str(source)]
  else:
    sources = [str(source[0]) + suffix for suffix in ['.scad']]
  for t in targets:
    for s in sources:
      env.Openscad(target=t, source=s)

def add_counter_to_filename(filename, index):
  base, ext = os.path.splitext(filename)
  return ''.join([base, "_", str(index), ext])

def add_unfiltered_to_filename(filename):
  base, ext = os.path.splitext(filename)
  return ''.join([base, "_unfiltered", ext])

def openscad_counter(target, source, counter):
  if '.' in str(target):
    targets = [str(target)]
  else:
    targets = [str(target) + suffix for suffix in ['.stl']]
  if '.' in str(source):
    sources = [str(source)]
  else:
    sources = [str(source[0]) + suffix for suffix in ['.scad']]
  for t in targets:
    for s in sources:
      for i in xrange(counter):
        group = str(t).split("_")[-1].split(".")[0]
        #print t,s,i,group

        openscad_input = [s]
        if i > 0:
          openscad_input += [add_counter_to_filename(t, i-1)]

        if i < counter - 1:
          openscad_output = add_unfiltered_to_filename(add_counter_to_filename(t, i))
        else:
          openscad_output = add_unfiltered_to_filename(t)

        meshlab_input = openscad_output

        if i < counter - 1:
          meshlab_output = add_counter_to_filename(t, i)
        else:
          meshlab_output = t

        #filename = os.path.splitext(env.File(t).abspath)[0]
        ##TODO: use Dir() below
        #  out_file = t.split(".")[0] + "_" + str(i) + "_unfiltered." + t.split(".")[1]
        #else :
        #  out_file = t.split(".")[0] + "_unfiltered." + t.split(".")[1]
        #
        #t_outfile = env.File(t).abspath
        #meshlab_input = ''.join(out_file.split("_unfiltered"))
        #meshlab_output = out_file
        env.FilterStl(meshlab_output, [meshlab_input, meshlab_filter_script])
        #
        #in_files = [s]
        #if i > 0:
        #  in_files += [meshlab_output]

        args = [
            '-D', ('$group="' + group + '"'),
            '-D', '$fn=' + str(GetOption('fn')),
            '-D', ('$level=' + str(i)),
            '--viewall', '--autocenter', '--render']
        if len(openscad_input) > 1:
          args += ['-D', ('$import_filename="' + str(env.File(openscad_input[1]).abspath) + '"')]

        env.Openscad(target=openscad_output,source=openscad_input,ARGS=args,COUNTER=counter)

def filter_stl(target, source, env):
  outfile = str(target[0])
  infile = str(source[0])
  command = [meshlab_binary,
             '-i', infile,
             '-o', outfile,
             '-s', str(source[1])]
  if not GetOption('silent'):
    print "'" + "' '".join(command) + "'"
  p = subprocess.Popen(command, stdout=subprocess.PIPE,
                       stderr=subprocess.PIPE)
  stdoutdata, stderrdata = p.communicate()
  if p.returncode != 0 or not GetOption('silent'):
    print "'" + "' '".join(command) + "'"
    sys.stderr.write(stderrdata)
    sys.stdout.write(stdoutdata)
  return p.returncode

openscad_builder = Builder(
    action = openscad)
filter_stl_builder = Builder(action = filter_stl, suffix = 'filtered.stl', src_suffix = ".stl")
env = Environment(
    BUILDERS = {'Openscad': openscad_builder, 'FilterStl': filter_stl_builder})
#print GetOption('fn')
#env["fn"] = int(GetOption('fn'))

include_re = re.compile(r'^(?:use|include)\s*\<(\S+)\>', re.M)

def scad_scan(node, env, path):
  contents = node.get_contents()
  includes = include_re.findall(contents)
  return includes

scad_scan = Scanner(function = scad_scan, skeys = ['.scad'])
env.Append(SCANNERS = scad_scan)

Export('env openscad2 openscad_counter')
conscripts = [dir + '/SConscript' for dir in ['esr_tester', 'holes_demo', 'function_generator', 'box_screw_post_demo', 'box_button_demo', 'box_screen_demo']]
SConscript(conscripts)
