#!python


import os
import re
import platform
import subprocess
import sys

windows = "Windows" in platform.platform()
if windows:
  openscad_binary = 'C:\Program Files\OpenSCAD\openscad.exe'
else:
  openscad_binary = "openscad-nightly"

meshlab_binary = "meshlabserver"
meshlab_filter_script = "../meshlab_scripts/stl_cleanup.mlx"

def stream_command(command, err_words):
  lines = ''
  command_text = "'" + "' '".join(command) + "'\n"
  if not GetOption('silent'):
    sys.stdout.write(command_text)
  else:
    lines += command_text
  p = subprocess.Popen(command,
                       stdout=subprocess.PIPE,
                       stderr=subprocess.STDOUT)
  for line in iter(p.stdout.readline, ''):
    lines += line
    if not GetOption('silent'):
      sys.stdout.write(line)
    if any([err_word in line.lower()
            for err_word in err_words]):
      # Haven't yet printed output but need to because error.
      if GetOption('silent'):
        sys.stdout.write(lines)
      p.terminate()
      p.wait()
      return p.returncode or 127
  p.wait()
  return p.returncode

def openscad(target, source, env):
  for t in target:
    command = [openscad_binary]
    command += env['ARGS']
    command += [
        '-o', str(target[0]),
        str(source[0])]
    return stream_command(command, ['warn', 'err'])

def openscad2(target, source, path):
  if '.' in str(target):
    targets = [str(target)]
  else:
    targets = [str(target) + suffix for suffix in ['.stl']]
  if '.' in str(source):
    sources = [str(source)]
  else:
    sources = [str(source[0]) + suffix for suffix in ['.scad']]
  for t in targets:
    for s in sources:
      args = [
          '-D', '$fn=' + str(GetOption('fn')),
          '--viewall', '--autocenter', '--render']
      env.Openscad(target=t,source=s,ARGS=args)

def add_counter_to_filename(filename, index):
  base, ext = os.path.splitext(filename)
  return ''.join([base, "_", str(index), ext])

def add_unfiltered_to_filename(filename):
  base, ext = os.path.splitext(filename)
  return ''.join([base, "_unfiltered", ext])

def add_sorted_to_filename(filename):
  base, ext = os.path.splitext(filename)
  return ''.join([base, "_sorted", ext])

def change_extension_to_csg(filename):
  base, ext = os.path.splitext(filename)
  return ''.join([base, ".csg"])

def openscad_counter(target, source, counter):
  if '.' in str(target):
    targets = [str(target)]
  else:
    targets = [str(target) + suffix for suffix in ['.stl']]
  if '.' in str(source):
    sources = [str(source)]
  else:
    sources = [str(source[0]) + suffix for suffix in ['.scad']]
  for t in targets:
    for s in sources:
      for i in xrange(counter):
        group = str(t).split("_")[-1].split(".")[0]
        #print t,s,i,group

        csg_input = [s]
        if i > 0:
          csg_input += [add_counter_to_filename(t, i-1)]

        if i < counter - 1:
          csg_output = change_extension_to_csg(add_counter_to_filename(t, i))
        else:
          csg_output = change_extension_to_csg(t)

        openscad_input = [csg_output]
        if i > 0:
          openscad_input += [add_counter_to_filename(t, i-1)]

        if i < counter - 1:
          openscad_output = add_unfiltered_to_filename(add_counter_to_filename(t, i))
        else:
          openscad_output = add_unfiltered_to_filename(t)

        stl_sorter_input = [openscad_output, stl_sorter_binary]

        if i < counter - 1:
          stl_sorter_output = add_sorted_to_filename(add_counter_to_filename(t, i))
        else:
          stl_sorter_output = add_sorted_to_filename(t)

        meshlab_input = stl_sorter_output

        if i < counter - 1:
          meshlab_output = add_counter_to_filename(t, i)
        else:
          meshlab_output = t

        env.FilterStl(meshlab_output, [meshlab_input, meshlab_filter_script])

        env.SortStl(stl_sorter_output, stl_sorter_input)

        args = [
            '-D', ('$group="' + group + '"'),
            '-D', '$fn=' + str(GetOption('fn')),
            '-D', ('$level=' + str(i)),
            '--viewall', '--autocenter', '--render']
        if len(csg_input) > 1:
          args += ['-D', ('$import_filename="' + str(env.File(csg_input[1]).abspath) + '"')]
        env.Openscad(target=csg_output,source=csg_input,ARGS=args,COUNTER=counter)

        args = [
            '-D', ('$group="' + group + '"'),
            '-D', '$fn=' + str(GetOption('fn')),
            '-D', ('$level=' + str(i)),
            '--viewall', '--autocenter', '--render']
        if len(openscad_input) > 1:
          args += ['-D', ('$import_filename="' + str(env.File(openscad_input[1]).abspath) + '"')]
        env.Openscad(target=openscad_output,source=openscad_input,ARGS=args,COUNTER=counter)

def filter_stl(target, source, env):
  outfile = str(target[0])
  infile = str(source[0])
  command = [meshlab_binary,
             '-i', infile,
             '-o', outfile,
             '-s', str(source[1])]
  return stream_command(command, [])

def sort_stl_command(target, source, env, for_signature):
  outfile = str(target[0])
  infile = str(source[0])
  command = '%s < %s > %s' % (stl_sorter_binary, infile, outfile)
  return command

openscad_builder = Builder(
    action = openscad)
filter_stl_builder = Builder(action = filter_stl, suffix = 'filtered.stl', src_suffix = ".stl")
sort_stl_builder = Builder(generator = sort_stl_command, suffix = 'sorted.stl', src_suffix = ".stl")
env = Environment(
    BUILDERS = {'Openscad': openscad_builder,
                'FilterStl': filter_stl_builder,
                'SortStl': sort_stl_builder})
#print GetOption('fn')
#env["fn"] = int(GetOption('fn'))
stl_sorter_binary = env.File("tools/stl_sorter.py").srcnode().abspath

include_re = re.compile(r'^(?:use|include)\s*\<(\S+)\>', re.M)

def scad_scan(node, env, path):
  contents = node.get_contents()
  includes = include_re.findall(contents)
  return includes

scad_scan = Scanner(function = scad_scan, skeys = ['.scad'])
env.Append(SCANNERS = scad_scan)

Export('env openscad2 openscad_counter')
conscripts = [dir + '/SConscript' for dir in ['esr_tester', 'holes_demo', 'function_generator', 'box_screw_post_demo', 'box_button_demo', 'box_screen_demo', 'box_port_demo']]
SConscript(conscripts)
