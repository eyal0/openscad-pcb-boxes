#!python
openscad_binary = 'openscad-nightly'

import os
import re

def openscad(target, source, env):
  part = str(target[0]).split("_")[-1].split(".")[0]
  for t in target:
    command = (openscad_binary +
              ' -D \'$part="' + part + '"\'' +
              ' -D \'$fn=' + str(env['fn']) + '\'' +
              ' --viewall --autocenter --render' +
               ' -o ' + str(target[0]) + ' ' + str(source[0]))
    os.system(command)

def openscad2(target, source, path):
  if '.' in str(target):
    targets = [str(target)]
  else:
    targets = [str(target) + suffix for suffix in ['.png', '.stl']]
  if '.' in str(source):
    sources = [str(source)]
  else:
    sources = [str(source[0]) + suffix for suffix in ['.scad']]
  #targets = [os.path.join(path, t) for t in targets]
  #sources = [os.path.join(path, s) for s in sources]
  for t in targets:
    for s in sources:
      env.Openscad(target=t, source=s)

openscad = Builder(
    action = openscad)
env = Environment(
    BUILDERS = {'Openscad': openscad})
env["fn"] = ARGUMENTS.get('fn', 10)

include_re = re.compile(r'^(?:use|include)\s*\<(\S+)\>', re.M)

def scad_scan(node, env, path):
  contents = node.get_contents()
  includes = include_re.findall(contents)
  return includes

scad_scan = Scanner(function = scad_scan, skeys = ['.scad'])
env.Append(SCANNERS = scad_scan)

Export('env openscad2')
conscripts = ['esr_tester/SConscript', 'holes_demo/SConscript']
SConscript(conscripts)
